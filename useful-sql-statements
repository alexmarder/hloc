CREATE OR REPLACE FUNCTION earthRadius() RETURNS numeric
    AS 'SELECT 6371.0'
    LANGUAGE SQL;

CREATE OR REPLACE FUNCTION gpsDistanceRadians(lat1 float, lon1 float, lat2 float, lon2 float) RETURNS float
    AS 'SELECT sqrt(pow((lon2 - lon1) * cos(0.5 * (lat2 + lat1)), 2) + pow(lat2 - lat1, 2)) * earthRadius()'
    LANGUAGE SQL
    RETURNS NULL on NULL INPUT;

CREATE OR REPLACE FUNCTION gpsDistance(lat1 float, lon1 float, lat2 float, lon2 float) RETURNS float
    AS 'SELECT gpsDistanceRadians(radians(lat1), radians(lon1), radians(lat2), radians(lon2))'
    LANGUAGE SQL
    RETURNS NULL on NULL INPUT;

CREATE OR REPLACE FUNCTION minimalRTTsForDistinctDestinations(oldestDateAllowed timestamp, youngestDateAllowed timestamp, excludeTracerouteMeasurements boolean, excludeCaidaMeasurements boolean) RETURNS TABLE (id INTEGER, ripe_measurement_id INTEGER, probe_id INTEGER, destination_address inet, m_timestamp timestamp, rtt float)
    AS $$ SELECT tmp_tbl.id as id, tmp_tbl.ripe_measurement_id as ripe_measurement_id, tmp_tbl.probe_id as probe_id, tmp_tbl.destination_address as destination_address, tmp_tbl.timestamp as m_timestamp, tmp_tbl.rtt as rtt
        FROM (SELECT *, row_number() OVER (PARTITION BY destination_address ORDER BY rtt) as row_nr
              FROM measurement_results
              WHERE (timestamp > oldestDateAllowed or oldestDateAllowed IS NULL) and (timestamp < youngestDateAllowed or youngestDateAllowed IS NULL) and (not excludeTracerouteMeasurements or not from_traceroute) and (not excludeCaidaMeasurements or not measurement_result_type = 'caida_ark_measurement')
              ) as tmp_tbl
        WHERE row_nr = 1
        $$
    LANGUAGE SQL;

CREATE OR REPLACE FUNCTION domainsWithDistanceRTTs(oldestDateAllowed timestamp, youngestDateAllowed timestamp, excludeTracerouteMeasurements boolean, excludeCaidaMeasurements boolean) RETURNS TABLE (domain_id integer, domain_name varchar, ip_address inet, location_hints_id integer, hint_location_code varchar, hint_location_id varchar, hint_location_lat float, hint_location_lon float, probe_id varchar, probe_location_lat float, probe_location_lon float, measurement_results_id integer, ripe_measurement_id INTEGER, measurement_timestamp timestamp, min_rtt float, distance float)
    AS $$
        WITH min_measurement_results as (
        SELECT tmp_tbl.id as id, tmp_tbl.ripe_measurement_id as ripe_measurement_id, tmp_tbl.probe_id as probe_id, tmp_tbl.destination_address as destination_address, tmp_tbl.timestamp as m_timestamp, tmp_tbl.rtt as rtt
        FROM (SELECT *, row_number() OVER (PARTITION BY destination_address ORDER BY rtt) as row_nr
              FROM measurement_results
              WHERE (timestamp > oldestDateAllowed or oldestDateAllowed IS NULL) and (timestamp < youngestDateAllowed or youngestDateAllowed IS NULL) and (not excludeTracerouteMeasurements or not from_traceroute) and (not excludeCaidaMeasurements or not measurement_result_type = 'caida_ark_measurement')
              ) as tmp_tbl
        WHERE row_nr = 1 )
        SELECT domains.id as domain_id, domains.name as domain_name, (CASE WHEN domains.ipv4_address IS NULL THEN domains.ipv6_address ELSE domains.ipv4_address END) as ip_address, location_hints.id as location_hints_id, location_hints.code as hint_location_code, hint_location.id as hint_location_id, hint_location.lat as hint_location_lat, hint_location.lon as hint_location_lon, probes.probe_id as probe_id, measurement_location.lat as probe_location_lat, measurement_location.lon as probe_location_lon, min_measurement_results.id as min_measurement_results, min_measurement_results.ripe_measurement_id as ripe_measurement_id, min_measurement_results.m_timestamp as measurement_timestamp, min_measurement_results.rtt as min_rtt, gpsDistance(hint_location.lat, hint_location.lon, measurement_location.lat, measurement_location.lon) as distance
        FROM domains join domain_to_labels d_t_label on (domains.id = d_t_label.domain_id and domains.classification_type = 'valid')
            join domain_labels on (domain_labels.id = d_t_label.domain_label_id)
            join location_hint_labels loc_hint on (domain_labels.id = loc_hint.domain_label_id)
            join location_hints on (location_hints.id = loc_hint.location_hint_id)
            join locations hint_location on (location_hints.location_id=hint_location.id)
            join min_measurement_results on (domains.ipv4_address = min_measurement_results.destination_address) // OR ipv6
            join probes on (probes.id = min_measurement_results.probe_id)
            join locations measurement_location on (measurement_location.id = probes.location_id)
        $$
    LANGUAGE SQL;

CREATE OR REPLACE FUNCTION domainsWithLocation(buffertime float, oldestDateAllowed timestamp, maxDistance float) RETURNS TABLE (domain_id integer, domain_name varchar, hint_location_id varchar, hint_location_name varchar, location_hints_id integer, measurement_results_id integer, probe_id varchar, distance float, min_rtt float)
    AS $$ SELECT domain_id, domain_name, hint_location_id, hint_location_name, location_hints_id, measurement_results_id, probe_id, distance, min_rtt
        FROM domainsWithDistanceRTTs(oldestDateAllowed, NULL, False, False) as temp_table
        WHERE min_rtt < 11 + buffertime AND distance < maxDistance AND distance / 100 + buffertime > min_rtt $$
    LANGUAGE SQL;

CREATE OR REPLACE VIEW valid9msView(domain_id, domain_name, hint_location_id, hint_location_name, location_hint_id, measurement_result_id, probe_id, distance, min_rtt)
    AS SELECT * from domainsWithLocation(9.0, TIMESTAMP '2017-08-17 00:00:00', 1000);

SELECT count(distinct domains.id)
FROM domains join domain_to_labels d_t_label on (domains.id = d_t_label.domain_id) 
    join domain_labels on (domain_labels.id = d_t_label.domain_label_id) 
    join location_hint_labels loc_hint on (domain_labels.id = loc_hint.domain_label_id) 
    join location_hints on (location_hints.id = loc_hint.location_hint_id) 
    join locations hint_location on (location_hints.location_id=hint_location.id) 
    join measurement_results on (domains.ipv4_address = measurement_results.destination_address and (measurement_results.timestamp > TIMESTAMP '2017-08-15 00:00:00' or measurement_results.measurement_result_type='zmap_measurement')) 
    join probes on (probes.id = measurement_results.probe_id)
    join locations measurement_location on (measurement_location.id = probes.location_id);

SELECT count(*)
FROM domains join domain_to_labels d_t_label on (domains.id = d_t_label.domain_id) join domain_labels on (domain_labels.id = d_t_label.domain_label_id) join location_hint_labels loc_hint on (domain_labels.id = loc_hint.domain_label_id) join location_hints on (location_hints.id = loc_hint.location_hint_id) join locations hint_location on (location_hints.location_id=hint_location.id)
WHERE EXISTS (SELECT 1 FROM measurement_results WHERE domains.ipv4_address = measurement_results.destination_address);
      

SELECT domains.id as domain_id, domains.name as domain_name, (CASE WHEN domains.ipv4_address IS NULL THEN domains.ipv6_address ELSE domains.ipv4_address END) as ip_address, location_hints.id as location_hints_id, location_hints.code as hint_location_code, hint_location.id as hint_location_id, hint_location.lat as hint_location_lat, hint_location.lon as hint_location_lon, probes.probe_id as probe_id, measurement_location.lat as probe_location_lat, measurement_location.lon as probe_location_lon, measurement_results.id as measurement_results_id, measurement_results.timestamp as measurement_timestamp, measurement_results.rtt as min_rtt, gpsDistance(hint_location.lat, hint_location.lon, measurement_location.lat, measurement_location.lon) as distance
        FROM domains join domain_to_labels d_t_label on (domains.id = d_t_label.domain_id and (domains.classification_type = 'valid' or domains.classification_type = 'ip_encoded') and domains.id < 10000)
            join domain_labels on (domain_labels.id = d_t_label.domain_label_id)
            join location_hint_labels loc_hint on (domain_labels.id = loc_hint.domain_label_id)
            join location_hints on (location_hints.id = loc_hint.location_hint_id)
            join locations hint_location on (location_hints.location_id=hint_location.id)
            join measurement_results on (domains.ipv4_address = measurement_results.destination_address)
            join probes on (probes.id = measurement_results.probe_id)
            join locations measurement_location on (measurement_location.id = probes.location_id)


                                                                               QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=956816.71..19551446.77 rows=16633639 width=151) (actual time=42345.530..905163.198 rows=1310286 loops=1)
   Hash Cond: ((probes.location_id)::text = (measurement_location.id)::text)
   ->  Hash Join  (cost=955662.42..14892873.56 rows=16633639 width=168) (actual time=42315.563..886963.916 rows=1310286 loops=1)
         Hash Cond: (d_t_label.domain_label_id = domain_labels.id)
         ->  Hash Join  (cost=359823.41..13791409.98 rows=5323641 width=114) (actual time=26274.456..857869.448 rows=321589 loops=1)
               Hash Cond: (domains.id = d_t_label.domain_id)
               ->  Hash Join  (cost=1436.51..12199648.52 rows=1124105 width=110) (actual time=2264.685..839786.393 rows=66562 loops=1)
                     Hash Cond: (measurement_results.probe_id = probes.id)
                     ->  Hash Join  (cost=592.96..12177728.00 rows=1124105 width=76) (actual time=2251.092..839431.938 rows=66562 loops=1)
                           Hash Cond: (measurement_results.destination_address = domains.ipv4_address)
                           ->  Seq Scan on measurement_results  (cost=0.00..8042394.55 rows=329879955 width=33) (actual time=0.006..622235.313 rows=349824523 loops=1)
                           ->  Hash  (cost=488.41..488.41 rows=8364 width=52) (actual time=42.092..42.092 rows=9999 loops=1)
                                 Buckets: 1024  Batches: 1  Memory Usage: 790kB
                                 ->  Index Scan using domains_pkey on domains  (cost=0.43..488.41 rows=8364 width=52) (actual time=0.029..36.627 rows=9999 loops=1)
                                       Index Cond: (id < 10000)
                                       Filter: ((classification_type = 'valid'::domaintype) OR (classification_type = 'ip_encoded'::domaintype))
                     ->  Hash  (cost=563.80..563.80 rows=22380 width=42) (actual time=13.566..13.566 rows=20814 loops=1)
                           Buckets: 4096  Batches: 1  Memory Usage: 1562kB
                           ->  Seq Scan on probes  (cost=0.00..563.80 rows=22380 width=42) (actual time=0.017..7.345 rows=20814 loops=1)
               ->  Hash  (cost=167677.73..167677.73 rows=11624173 width=8) (actual time=6933.989..6933.989 rows=11624523 loops=1)
                     Buckets: 16384  Batches: 128  Memory Usage: 3606kB
                     ->  Seq Scan on domain_to_labels d_t_label  (cost=0.00..167677.73 rows=11624173 width=8) (actual time=0.030..2979.883 rows=11624523 loops=1)
         ->  Hash  (cost=460226.93..460226.93 rows=5599447 width=66) (actual time=16040.949..16040.949 rows=5599447 loops=1)
               Buckets: 4096  Batches: 256  Memory Usage: 2393kB
               ->  Hash Join  (cost=70545.51..460226.93 rows=5599447 width=66) (actual time=1590.183..13096.958 rows=5599447 loops=1)
                     Hash Cond: (loc_hint.location_hint_id = location_hints.id)
                     ->  Hash Join  (cost=65909.65..288421.14 rows=5599447 width=12) (actual time=1366.851..8004.237 rows=5599447 loops=1)
                           Hash Cond: (loc_hint.domain_label_id = domain_labels.id)
                           ->  Seq Scan on location_hint_labels loc_hint  (cost=0.00..80773.47 rows=5599447 width=8) (actual time=0.032..1629.554 rows=5599447 loops=1)
                           ->  Hash  (cost=36507.18..36507.18 rows=1792118 width=4) (actual time=1366.624..1366.624 rows=1792118 loops=1)
                                 Buckets: 16384  Batches: 32  Memory Usage: 1985kB
                                 ->  Seq Scan on domain_labels  (cost=0.00..36507.18 rows=1792118 width=4) (actual time=0.013..679.788 rows=1792118 loops=1)
                     ->  Hash  (cost=3561.04..3561.04 rows=46225 width=58) (actual time=222.941..222.941 rows=46225 loops=1)
                           Buckets: 8192  Batches: 2  Memory Usage: 2188kB
                           ->  Hash Join  (cost=1154.29..3561.04 rows=46225 width=58) (actual time=36.486..149.811 rows=46225 loops=1)
                                 Hash Cond: ((location_hints.location_id)::text = (hint_location.id)::text)
                                 ->  Seq Scan on location_hints  (cost=0.00..1482.25 rows=46225 width=42) (actual time=0.078..25.145 rows=46225 loops=1)
                                 ->  Hash  (cost=840.24..840.24 rows=25124 width=49) (actual time=36.384..36.384 rows=25250 loops=1)
                                       Buckets: 4096  Batches: 1  Memory Usage: 2170kB
                                       ->  Seq Scan on locations hint_location  (cost=0.00..840.24 rows=25124 width=49) (actual time=0.007..17.049 rows=25250 loops=1)
   ->  Hash  (cost=840.24..840.24 rows=25124 width=49) (actual time=29.734..29.734 rows=25250 loops=1)
         Buckets: 4096  Batches: 1  Memory Usage: 1998kB
         ->  Seq Scan on locations measurement_location  (cost=0.00..840.24 rows=25124 width=49) (actual time=0.006..8.336 rows=25250 loops=1)
 Planning time: 2.956 ms
 Execution time: 905445.402 ms


WITH min_measurement_results as (
    SELECT tmp_tbl.id as id, tmp_tbl.ripe_measurement_id as ripe_measurement_id, tmp_tbl.probe_id as probe_id, tmp_tbl.destination_address as destination_address, tmp_tbl.timestamp as m_timestamp, tmp_tbl.rtt as rtt
    FROM (SELECT *, row_number() OVER (PARTITION BY destination_address ORDER BY rtt) as row_nr
          FROM measurement_results
          WHERE (timestamp > TIMESTAMP '2017-09-09 10:00') and (timestamp < NULL or NULL IS NULL)
          ) as tmp_tbl
    WHERE row_nr = 1 )
SELECT domains.id as domain_id, domains.name as domain_name, (CASE WHEN domains.ipv4_address IS NULL THEN domains.ipv6_address ELSE domains.ipv4_address END) as ip_address, location_hints.id as location_hints_id, location_hints.code as hint_location_code, hint_location.id as hint_location_id, hint_location.lat as hint_location_lat, hint_location.lon as hint_location_lon, probes.probe_id as probe_id, measurement_location.lat as probe_location_lat, measurement_location.lon as probe_location_lon, min_measurement_results.id as min_measurement_results, min_measurement_results.ripe_measurement_id as ripe_measurement_id, min_measurement_results.m_timestamp as measurement_timestamp, min_measurement_results.rtt as min_rtt, gpsDistance(hint_location.lat, hint_location.lon, measurement_location.lat, measurement_location.lon) as distance
FROM domains join domain_to_labels d_t_label on (domains.id = d_t_label.domain_id and domains.classification_type = 'valid')
    join domain_labels on (domain_labels.id = d_t_label.domain_label_id)
    join location_hint_labels loc_hint on (domain_labels.id = loc_hint.domain_label_id)
    join location_hints on (location_hints.id = loc_hint.location_hint_id)
    join locations hint_location on (location_hints.location_id=hint_location.id)
    join min_measurement_results on (domains.ipv4_address = min_measurement_results.destination_address)
    join probes on (probes.id = min_measurement_results.probe_id)
    join locations measurement_location on (measurement_location.id = probes.location_id)

                                                                                          QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=124483692.81..127900207.84 rows=10219052 width=155) (actual time=3561195.709..3623140.294 rows=3506623 loops=1)
   Hash Cond: ((probes.location_id)::text = (measurement_location.id)::text)
   CTE min_measurement_results
     ->  Subquery Scan on tmp_tbl  (cost=112960681.31..123548698.75 rows=1628926 width=37) (actual time=2745542.155..3523232.081 rows=1488398 loops=1)
           Filter: (tmp_tbl.row_nr = 1)
           Rows Removed by Filter: 344003286
           ->  WindowAgg  (cost=112960681.31..119476384.35 rows=325785152 width=78) (actual time=2745542.143..3445224.686 rows=345491684 loops=1)
                 ->  Sort  (cost=112960681.31..113775144.19 rows=325785152 width=78) (actual time=2745542.108..3166630.972 rows=345491684 loops=1)
                       Sort Key: measurement_results.destination_address, measurement_results.rtt
                       Sort Method: external merge  Disk: 30890464kB
                       ->  Seq Scan on measurement_results  (cost=0.00..8992496.76 rows=325785152 width=78) (actual time=13.166..380432.175 rows=345491684 loops=1)
                             Filter: ("timestamp" > '2017-09-09 10:00:00'::timestamp without time zone)
                             Rows Removed by Filter: 9321480
   ->  Hash Join  (cost=933839.77..1489020.25 rows=10219052 width=172) (actual time=3560635.677..3575547.857 rows=3506623 loops=1)
         Hash Cond: (loc_hint.domain_label_id = domain_labels.id)
         ->  Hash Join  (cost=4635.85..220643.34 rows=5599447 width=62) (actual time=146.519..7884.526 rows=5599447 loops=1)
               Hash Cond: (loc_hint.location_hint_id = location_hints.id)
               ->  Seq Scan on location_hint_labels loc_hint  (cost=0.00..80773.47 rows=5599447 width=8) (actual time=0.176..3507.716 rows=5599447 loops=1)
               ->  Hash  (cost=3561.04..3561.04 rows=46225 width=58) (actual time=146.198..146.198 rows=46225 loops=1)
                     Buckets: 8192  Batches: 2  Memory Usage: 2188kB
                     ->  Hash Join  (cost=1154.29..3561.04 rows=46225 width=58) (actual time=21.452..122.678 rows=46225 loops=1)
                           Hash Cond: ((location_hints.location_id)::text = (hint_location.id)::text)
                           ->  Seq Scan on location_hints  (cost=0.00..1482.25 rows=46225 width=42) (actual time=4.209..55.247 rows=46225 loops=1)
                           ->  Hash  (cost=840.24..840.24 rows=25124 width=49) (actual time=17.218..17.218 rows=25250 loops=1)
                                 Buckets: 4096  Batches: 1  Memory Usage: 2170kB
                                 ->  Seq Scan on locations hint_location  (cost=0.00..840.24 rows=25124 width=49) (actual time=0.005..8.480 rows=25250 loops=1)
         ->  Hash  (cost=827634.98..827634.98 rows=3270635 width=122) (actual time=3560464.452..3560464.452 rows=617083 loops=1)
               Buckets: 4096  Batches: 256 (originally 128)  Memory Usage: 13310kB
               ->  Hash Join  (cost=276513.01..827634.98 rows=3270635 width=122) (actual time=3544970.688..3560041.216 rows=617083 loops=1)
                     Hash Cond: (d_t_label.domain_label_id = domain_labels.id)
                     ->  Hash Join  (cost=210603.36..586592.51 rows=3270635 width=118) (actual time=3542023.349..3554419.657 rows=617083 loops=1)
                           Hash Cond: (d_t_label.domain_id = domains.id)
                           ->  Seq Scan on domain_to_labels d_t_label  (cost=0.00..167677.73 rows=11624173 width=8) (actual time=0.987..7364.491 rows=11624523 loops=1)
                           ->  Hash  (cost=189830.73..189830.73 rows=690610 width=114) (actual time=3542017.854..3542017.854 rows=134818 loops=1)
                                 Buckets: 4096  Batches: 32  Memory Usage: 624kB
                                 ->  Hash Join  (cost=79155.97..189830.73 rows=690610 width=114) (actual time=2765796.988..3541902.529 rows=134818 loops=1)
                                       Hash Cond: (min_measurement_results.probe_id = probes.id)
                                       ->  Hash Join  (cost=78290.07..175152.64 rows=690610 width=80) (actual time=2765782.197..3541761.675 rows=134818 loops=1)
                                             Hash Cond: (min_measurement_results.destination_address = domains.ipv4_address)
                                             ->  CTE Scan on min_measurement_results  (cost=0.00..32578.52 rows=1628926 width=60) (actual time=2745542.161..3525025.781 rows=1488398 loops=1)
                                             ->  Hash  (cost=55119.25..55119.25 rows=1040626 width=52) (actual time=14631.598..14631.598 rows=1028182 loops=1)
                                                   Buckets: 8192  Batches: 32  Memory Usage: 2342kB
                                                   ->  Seq Scan on domains  (cost=0.00..55119.25 rows=1040626 width=52) (actual time=0.025..14062.244 rows=1028182 loops=1)
                                                         Filter: (classification_type = 'valid'::domaintype)
                                                         Rows Removed by Filter: 1421886
                                       ->  Hash  (cost=578.73..578.73 rows=22973 width=42) (actual time=14.776..14.776 rows=20814 loops=1)
                                             Buckets: 4096  Batches: 1  Memory Usage: 1562kB
                                             ->  Seq Scan on probes  (cost=0.00..578.73 rows=22973 width=42) (actual time=0.018..7.974 rows=20814 loops=1)
                     ->  Hash  (cost=36507.18..36507.18 rows=1792118 width=4) (actual time=2945.006..2945.006 rows=1792118 loops=1)
                           Buckets: 16384  Batches: 32  Memory Usage: 1986kB
                           ->  Seq Scan on domain_labels  (cost=0.00..36507.18 rows=1792118 width=4) (actual time=1.045..2267.588 rows=1792118 loops=1)
   ->  Hash  (cost=840.24..840.24 rows=25124 width=49) (actual time=559.728..559.728 rows=25250 loops=1)
         Buckets: 4096  Batches: 1  Memory Usage: 1998kB
         ->  Seq Scan on locations measurement_location  (cost=0.00..840.24 rows=25124 width=49) (actual time=0.926..548.174 rows=25250 loops=1)
 Planning time: 36.373 ms
 Execution time: 3628059.958 ms

show https://explain.depesz.com/s/Tsh
delete https://explain.depesz.com/d/Tsh/v1IWqRa6txwich6vZqoE9utnnrieCYT7ZldQCEW6CTonAujjlY

WITH min_measurement_results as (
    SELECT measurement_results.*
    FROM measurement_results join (SELECT destination_address, min(rtt) as rtt
          FROM measurement_results
          GROUP BY destination_address
          ) as tmp_tbl on (measurement_results.rtt = tmp_tbl.rtt AND measurement_results.destination_address = tmp_tbl.destination_address)
    )
SELECT domains.id as domain_id, domains.name as domain_name, (CASE WHEN domains.ipv4_address IS NULL THEN domains.ipv6_address ELSE domains.ipv4_address END) as ip_address, location_hints.id as location_hints_id, location_hints.code as hint_location_code, hint_location.id as hint_location_id, hint_location.lat as hint_location_lat, hint_location.lon as hint_location_lon, probes.probe_id as probe_id, measurement_location.lat as probe_location_lat, measurement_location.lon as probe_location_lon, min_measurement_results.id as min_measurement_results, min_measurement_results.ripe_measurement_id as ripe_measurement_id, min_measurement_results.timestamp as measurement_timestamp, min_measurement_results.rtt as min_rtt, gpsDistance(hint_location.lat, hint_location.lon, measurement_location.lat, measurement_location.lon) as distance
FROM domains join domain_to_labels d_t_label on (domains.id = d_t_label.domain_id and domains.classification_type = 'valid')
    join domain_labels on (domain_labels.id = d_t_label.domain_label_id)
    join location_hint_labels loc_hint on (domain_labels.id = loc_hint.domain_label_id)
    join location_hints on (location_hints.id = loc_hint.location_hint_id)
    join locations hint_location on (location_hints.location_id=hint_location.id)
    join min_measurement_results on (domains.ipv4_address = min_measurement_results.destination_address)
    join probes on (probes.id = min_measurement_results.probe_id)
    join locations measurement_location on (measurement_location.id = probes.location_id)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=128936161.20..129045859.52 rows=24021 width=155) (actual time=4546031.145..4614328.518 rows=3549151 loops=1)
   Hash Cond: ((probes.location_id)::text = (measurement_location.id)::text)
   CTE min_measurement_results
     ->  Hash Join  (cost=93676595.67..128627101.97 rows=3829 width=78) (actual time=2333457.719..4508521.474 rows=1525018 loops=1)
           Hash Cond: ((tmp_tbl.rtt = measurement_results.rtt) AND (tmp_tbl.destination_address = measurement_results.destination_address))
           ->  Subquery Scan on tmp_tbl  (cost=76228074.12..78742741.78 rows=84105 width=17) (actual time=1515277.806..1810566.819 rows=1492963 loops=1)
                 ->  GroupAggregate  (cost=76228074.12..78741900.73 rows=84105 width=17) (actual time=1515277.805..1810024.945 rows=1492963 loops=1)
                       Group Key: measurement_results_1.destination_address
                       ->  Sort  (cost=76228074.12..77065735.97 rows=335064742 width=17) (actual time=1515277.732..1708877.060 rows=355373380 loops=1)
                             Sort Key: measurement_results_1.destination_address
                             Sort Method: external merge  Disk: 10035392kB
                             ->  Seq Scan on measurement_results measurement_results_1  (cost=0.00..8168798.42 rows=335064742 width=17) (actual time=0.007..206816.701 rows=355373380 loops=1)
           ->  Hash  (cost=8168798.42..8168798.42 rows=335064742 width=78) (actual time=816405.295..816405.295 rows=355373380 loops=1)
                 Buckets: 4096  Batches: 16384  Memory Usage: 2561kB
                 ->  Seq Scan on measurement_results  (cost=0.00..8168798.42 rows=335064742 width=78) (actual time=0.009..456616.035 rows=355373380 loops=1)
   ->  Hash Join  (cost=307904.93..410877.38 rows=24021 width=172) (actual time=4545885.573..4567203.819 rows=3549151 loops=1)
         Hash Cond: ((location_hints.location_id)::text = (hint_location.id)::text)
         ->  Hash Join  (cost=306750.64..409242.67 rows=24021 width=156) (actual time=4545868.663..4563530.462 rows=3549151 loops=1)
               Hash Cond: (loc_hint.location_hint_id = location_hints.id)
               ->  Hash Join  (cost=304690.58..406702.19 rows=24021 width=118) (actual time=4545747.427..4560405.579 rows=3549151 loops=1)
                     Hash Cond: (loc_hint.domain_label_id = domain_labels.id)
                     ->  Seq Scan on location_hint_labels loc_hint  (cost=0.00..80773.47 rows=5599447 width=8) (actual time=0.014..3854.586 rows=5599447 loops=1)
                     ->  Hash  (cost=304594.48..304594.48 rows=7688 width=122) (actual time=4545746.873..4545746.873 rows=624379 loops=1)
                           Buckets: 1024  Batches: 262144 (originally 1)  Memory Usage: 13271kB
                           ->  Hash Join  (cost=89552.64..304594.48 rows=7688 width=122) (actual time=4518907.198..4545119.888 rows=624379 loops=1)
                                 Hash Cond: (min_measurement_results.probe_id = probes.id)
                                 ->  Nested Loop  (cost=88679.32..303567.39 rows=7688 width=88) (actual time=4518893.534..4544403.693 rows=624379 loops=1)
                                       ->  Hash Join  (cost=88678.89..300024.13 rows=7688 width=84) (actual time=4518889.592..4539958.432 rows=624379 loops=1)
                                             Hash Cond: (d_t_label.domain_id = domains.id)
                                             ->  Seq Scan on domain_to_labels d_t_label  (cost=0.00..167677.73 rows=11624173 width=8) (actual time=1.312..5115.767 rows=11624523 loops=1)
                                             ->  Hash  (cost=88658.60..88658.60 rows=1623 width=80) (actual time=4518883.778..4518883.778 rows=136449 loops=1)
                                                   Buckets: 1024  Batches: 4 (originally 1)  Memory Usage: 4097kB
                                                   ->  Hash Join  (cost=78290.07..88658.60 rows=1623 width=80) (actual time=2433702.773..4518752.066 rows=136449 loops=1)
                                                         Hash Cond: (min_measurement_results.destination_address = domains.ipv4_address)
                                                         ->  CTE Scan on min_measurement_results  (cost=0.00..76.58 rows=3829 width=60) (actual time=2333457.725..4511428.073 rows=1525018 loops=1)
                                                         ->  Hash  (cost=55119.25..55119.25 rows=1040626 width=52) (actual time=4927.030..4927.030 rows=1028182 loops=1)
                                                               Buckets: 8192  Batches: 32  Memory Usage: 2342kB
                                                               ->  Seq Scan on domains  (cost=0.00..55119.25 rows=1040626 width=52) (actual time=0.020..4348.380 rows=1028182 loops=1)
                                                                     Filter: (classification_type = 'valid'::domaintype)
                                                                     Rows Removed by Filter: 1421886
                                       ->  Index Only Scan using domain_labels_pkey on domain_labels  (cost=0.43..0.45 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=624379)
                                             Index Cond: (id = d_t_label.domain_label_id)
                                             Heap Fetches: 0
                                 ->  Hash  (cost=583.70..583.70 rows=23170 width=42) (actual time=13.648..13.648 rows=20814 loops=1)
                                       Buckets: 4096  Batches: 1  Memory Usage: 1562kB
                                       ->  Seq Scan on probes  (cost=0.00..583.70 rows=23170 width=42) (actual time=0.017..7.368 rows=20814 loops=1)
               ->  Hash  (cost=1482.25..1482.25 rows=46225 width=42) (actual time=121.199..121.199 rows=46225 loops=1)
                     Buckets: 8192  Batches: 1  Memory Usage: 3376kB
                     ->  Seq Scan on location_hints  (cost=0.00..1482.25 rows=46225 width=42) (actual time=5.262..102.887 rows=46225 loops=1)
         ->  Hash  (cost=840.24..840.24 rows=25124 width=49) (actual time=16.884..16.884 rows=25250 loops=1)
               Buckets: 4096  Batches: 1  Memory Usage: 2170kB
               ->  Seq Scan on locations hint_location  (cost=0.00..840.24 rows=25124 width=49) (actual time=0.005..7.746 rows=25250 loops=1)
   ->  Hash  (cost=840.24..840.24 rows=25124 width=49) (actual time=145.291..145.291 rows=25250 loops=1)
         Buckets: 4096  Batches: 1  Memory Usage: 1998kB
         ->  Seq Scan on locations measurement_location  (cost=0.00..840.24 rows=25124 width=49) (actual time=1.639..131.281 rows=25250 loops=1)
 Planning time: 85.888 ms
 Execution time: 4616403.180 ms

explain https://explain.depesz.com/s/oSH2
delete https://explain.depesz.com/d/oSH2/yuA6R81QIEvcdZZPp1VXVNNT0gUEYl0XfAc7IeXbsTEW3nvrnQ